<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


namespace Eccube\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Eccube\Entity\Order;
use Eccube\Entity\Payment;
use Eccube\Entity\Delivery;
use Eccube\Entity\Master\ProductType;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{
    /**
     * 
     * @param integer|null $id
     * @return Payment
     */
    public function findOrCreate($id = null)
    {
        if (!$id) {
            $Creator = $this
                ->getEntityManager()
                ->getRepository('\Eccube\Entity\Member')
                ->find(2);

            $Payment = $this->findOneBy(array(), array('rank' => 'DESC'));

            $rank = 1;
            if ($Payment) {
                $rank = $Payment->getRank() + 1;
            }

            $Payment = new \Eccube\Entity\Payment();
            $Payment
                ->setRank($rank)
                ->setDelFlg(0)
                ->setFixFlg(1)
                ->setChargeFlg(1)
                ->setCreator($Creator);
        } else {
            $Payment = $this->find($id);
        }

        return $Payment;
    }

    public function findAllArray()
    {
        $query = $this
            ->getEntityManager()
            ->createQuery('SELECT p FROM Eccube\Entity\Payment p INDEX BY p.id');
        $result = $query
            ->getResult(Query::HYDRATE_ARRAY);

        return $result;
    }

    /**
     * Order から適切な Payment を取得
     * 
     * プラグインなどでの拡張用に Order のみで Payment を取得
     * 
     * @param Order $Order
     * @return Payment[]
     */
    public function findByOrder(Order $Order)
    {
//        return $this->findByDeliveriesAndSubtotal($Order->getDeliveries(), $Order->getSubtotal());
        return $this->findByProductTypesAndSubtotal($Order->getProductTypes(), $Order->getSubtotal());
    }

    /**
     * 配送方法と特定金額から共通で利用出来る適切な支払い方法を取得
     * 
     * @param Delivery[] $Deliveries
     * @param integer $price
     * @return Payment[]
     */
    public function findByDeliveriesAndSubtotal($Deliveries, $price = null, $hydrationMode = Query::HYDRATE_OBJECT)
    {
        if (!$Deliveries) {
            return array();
        }

        $qb = $this->createQueryBuilder('p')
            ->orderBy('p.rank', 'DESC');

        foreach ($Deliveries as $i => $Delivery) {
            $qb2 = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('po_'.$i)
                ->from('Eccube\Entity\PaymentOption', 'po_'.$i)
                ->innerJoin('po_'.$i.'.Delivery', 'd_'.$i)
                ->where('po_'.$i.'.payment_id = p.id')
                ->andWhere('d_'.$i.'.id = :Delivery_'.$i);
            $qb
                ->setParameter('Delivery_'.$i, $Delivery)
                ->andWhere('EXISTS('.$qb2->getDql().')');
        }

        if (!is_null($price)) {
            $qb
                ->andWhere('p.rule_min IS NULL OR p.rule_min <= :price')
                ->andWhere('p.rule_max IS NULL OR p.rule_max >= :price')
                ->setParameter('price', $price);
        }

        $Payments = $qb->getQuery()->getResult($hydrationMode);

        return $Payments;
    }

    /**
     * 商品種別と特定金額から共通で利用出来る適切な支払い方法を取得
     * 
     * @param ProductType[] $ProductTypes
     * @param integer $price
     * @return Payment[]
     */
    public function findByProductTypesAndSubtotal($ProductTypes, $price = null, $hydrationMode = Query::HYDRATE_OBJECT)
    {
        if (!$ProductTypes) {
            return array();
        }

        $qb = $this->createQueryBuilder('p')
            ->orderBy('p.rank', 'DESC');

        foreach ($ProductTypes as $i => $ProductType) {
            $qb2 = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('po_'.$i)
                ->from('Eccube\Entity\PaymentOption', 'po_'.$i)
                ->innerJoin('po_'.$i.'.Delivery', 'd_'.$i)
                ->where('po_'.$i.'.payment_id = p.id')
                ->andWhere('d_'.$i.'.ProductType = :ProductType_'.$i);
            $qb
                ->setParameter('ProductType_'.$i, $ProductType)
                ->andWhere('EXISTS('.$qb2->getDql().')');
        }

        if (!is_null($price)) {
            $qb
                ->andWhere('p.rule_min IS NULL OR p.rule_min <= :price')
                ->andWhere('p.rule_max IS NULL OR p.rule_max >= :price')
                ->setParameter('price', $price);
        }

        $Payments = $qb->getQuery()->getResult($hydrationMode);

        return $Payments;
    }

    /**
     * 支払方法を取得
     * 条件によってはDoctrineのキャッシュが返されるため、arrayで結果を返すパターンも用意
     *
     * @deprecated since 3.0.8, to be removed in 3.1
     * @param Delivery $delivery
     * @param boolean $returnType true: Object、false: arrayが戻り値
     * @return Payment[]|array
     */
    public function findPayments($delivery, $returnType = false)
    {
        @trigger_error('The '.__METHOD__.' method is deprecated since 3.0.8, to be removed in 3.1.', E_USER_DEPRECATED);

        return $this->findByDeliveriesAndSubtotal(array($delivery), null, $returnType ? Query::HYDRATE_OBJECT : Query::HYDRATE_ARRAY);
    }

    /**
     * 共通の支払方法を取得
     *
     * @deprecated since 3.0.8, to be removed in 3.1
     * @param  Delivery $deliveries
     * @return array
     */
    public function findAllowedPayments($deliveries)
    {
        @trigger_error('The '.__METHOD__.' method is deprecated since 3.0.8, to be removed in 3.1.', E_USER_DEPRECATED);

        return $this->findByDeliveriesAndSubtotal($deliveries, null, Query::HYDRATE_ARRAY);
    }
}
